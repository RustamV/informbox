{"version":3,"sources":["components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","isResetActive","idChecked","nameChecked","yearChecked","colorChecked","valueChecked","className","onClick","resetCheckboxes","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","type","checked","onChange","toggleCheckBox","colors","map","item","key","id","name","year","style","backgroundColor","color","pantone_value","App","state","JSON","parse","localStorage","getItem","bind","fetch","response","json","this","setState","data","setItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0282d14.chunk.js","sourcesContent":["import React from 'react';\r\nimport './table.css'\r\n\r\n\r\nexport default function Table (props) {\r\n    \r\n    const isResetActive = !(props.idChecked && props.nameChecked && props.yearChecked && props.colorChecked && props.valueChecked);\r\n\r\n    return (\r\n        <div className=\"table\">\r\n            <div className=\"table__header\">\r\n                <h1>Pantone colors</h1>\r\n                <div className={`table__reset ${isResetActive ? \"active\" : null}`} onClick={() => props.resetCheckboxes()}>\r\n                    <svg width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M9 1.17C13.3244 1.17 16.83 4.67561 16.83 9C16.83 13.3244 13.3244 16.83 9 16.83V18C13.9706 18 18 13.9706 18 9C18 4.02944 13.9706 0 9 0C5.64428 0 2.71752 1.83656 1.17 4.55937C0.936352 4.97046 0.734144 5.40177 0.566648 5.85L1.72363 6.10242C1.88368 5.70084 2.07602 5.31564 2.29743 4.95C3.66943 2.68426 6.15788 1.17 9 1.17Z\" fill=\"#888888\"/>\r\n                        <path d=\"M9 16.83V18C6.26811 18 3.8205 16.7828 2.16993 14.8611L3 14.0311C4.43633 15.7422 6.59113 16.83 9 16.83Z\" fill=\"#888888\"/>\r\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.17 5.13H5.13H6.3V6.3H2.86102e-06V0H1.17V1.17V5.13Z\" fill=\"#888888\"/>\r\n                    </svg>\r\n                    <p>Reset</p>\r\n                </div>\r\n            </div>\r\n            <table className=\"table__content\">\r\n                <thead>\r\n                    <tr>\r\n                        {props.idChecked ? <th className=\"id\"><input type=\"checkbox\" checked={props.idChecked} onChange={() => props.toggleCheckBox(1)}/>ID</th> : null}\r\n                        {props.nameChecked ? <th className=\"name\"><input type=\"checkbox\" checked={props.nameChecked} onChange={() => props.toggleCheckBox(2)}/>NAME</th> : null}\r\n                        {props.yearChecked ? <th className=\"year\"><input type=\"checkbox\" checked={props.yearChecked} onChange={() => props.toggleCheckBox(3)}/>YEAR</th> : null}\r\n                        {props.colorChecked ? <th className=\"color\"><input type=\"checkbox\" checked={props.colorChecked} onChange={() => props.toggleCheckBox(4)}/>COLOR</th> : null}\r\n                        {props.valueChecked ? <th className=\"value\"><input type=\"checkbox\" checked={props.valueChecked} onChange={() => props.toggleCheckBox(5)}/>PANTONE VALUE</th> : null}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.colors.map(item => (\r\n                        <tr key={item.id}>\r\n                            {props.idChecked ? <td className=\"id\">{item.id}</td> : null}\r\n                            {props.nameChecked ? <td>{item.name}</td> : null}\r\n                            {props.yearChecked ? <td>{item.year}</td> : null}\r\n                            {props.colorChecked ? <td><span className=\"color-box\" style={{backgroundColor: item.color}}></span>{item.color}</td> : null}\r\n                            {props.valueChecked ? <td>{item.pantone_value}</td> : null}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        \r\n    );\r\n    \r\n}\r\n","import React from 'react';\nimport Table from './components/Table/Table';\nimport './App.css';\nimport './fonts.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            colors: [],\n            idChecked: JSON.parse(localStorage.getItem('idChecked')) === null ? true : JSON.parse(localStorage.getItem('idChecked')),\n            nameChecked: JSON.parse(localStorage.getItem('nameChecked')) === null ? true : JSON.parse(localStorage.getItem('nameChecked')),\n            yearChecked: JSON.parse(localStorage.getItem('yearChecked')) === null ? true : JSON.parse(localStorage.getItem('yearChecked')),\n            colorChecked: JSON.parse(localStorage.getItem('colorChecked')) === null ? true : JSON.parse(localStorage.getItem('colorChecked')),\n            valueChecked: JSON.parse(localStorage.getItem('valueChecked')) === null ? true : JSON.parse(localStorage.getItem('valueChecked')),\n        }\n        this.toggleCheckBox = this.toggleCheckBox.bind(this);\n        this.resetCheckboxes = this.resetCheckboxes.bind(this);\n    }\n    \n    \n   async componentDidMount() {\n    const response = await fetch(`https://reqres.in/api/unknown?per_page=12`);\n    const colors = await response.json();\n    this.setState({\n        colors: colors.data\n    });\n   } \n\n   toggleCheckBox(type) {\n    switch(type) {\n        case 1: {\n            localStorage.setItem('idChecked', !this.state.idChecked);\n            this.setState({\n                idChecked: !this.state.idChecked\n            });\n            \n            break;\n        }\n        case 2: {\n            localStorage.setItem('nameChecked', !this.state.nameChecked);\n            this.setState({\n                nameChecked: !this.state.nameChecked\n            });\n            break;\n        }\n        case 3: {\n            localStorage.setItem('yearChecked', !this.state.yearChecked);\n            this.setState({\n                yearChecked: !this.state.yearChecked\n            });\n            break;\n        }\n        case 4: {\n            localStorage.setItem('colorChecked', !this.state.colorChecked);\n            this.setState({\n                colorChecked: !this.state.colorChecked\n            });\n            break;\n        }\n        case 5: {\n            localStorage.setItem('valueChecked', !this.state.valueChecked);\n            this.setState({\n                valueChecked: !this.state.valueChecked\n            });\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n   }\n\n   resetCheckboxes() {\n    localStorage.setItem('idChecked', true);\n    localStorage.setItem('nameChecked', true);\n    localStorage.setItem('yearChecked', true);\n    localStorage.setItem('colorChecked', true);\n    localStorage.setItem('valueChecked', true);\n    this.setState({\n        idChecked: true,\n        nameChecked: true,\n        yearChecked: true,\n        colorChecked: true,\n        valueChecked: true\n    });\n   }\n   \n   render() {\n        return (\n            <div className=\"App\">\n                <Table colors={this.state.colors}\n                    idChecked={this.state.idChecked}\n                    nameChecked={this.state.nameChecked}\n                    yearChecked={this.state.yearChecked}\n                    colorChecked={this.state.colorChecked}\n                    valueChecked={this.state.valueChecked}\n                    toggleCheckBox={this.toggleCheckBox}\n                    resetCheckboxes={this.resetCheckboxes}\n                />\n            </div>\n        );\n   }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}